## Anime [/anime]
These are the endpoints you'll want to use to search for and enquire
more information about Anime.


### Search Anime [GET /anime/search/{?anime}{?language}{?dubbed}{?group}{?results}]
Based on a query (i.e. the name of an Anime) it returns matching results.

Use this endpoint to get an accurate match for a title, for actual
search requests you should use the indexsearch endpoint.

Depending on the amount of results (up to `20`) you request,
this operation can take a long time. **You should seldom request search results**
and if you do you should store the details of the result(s)!

The search results are already sorted in descending order by their `certainty` attribute.

+ Parameters
  +   anime (string, required, `One Piece`) ... Title of the Anime
  +   language (string, optional, `en`) ... Filter for language, defaults
      to `en`
  +   dubbed (boolean, optional, `false`) ... Filter translation type,
      defaults to `false`
  +   group (boolean, optional, `true`) ... Whether or not to group
      results with the same medium id or not, defaults to `true`
  +   results (number, optional, `3`) ... Amount of (SearchResult)s to
      return, defaults to `1`

+ Response 200 (application/json)
    + Attributes
        + anime (array)
            - (SearchResult)



### Search Anime in index [GET /anime/indexsearch/{?query}{?language}{?dubbed}{?group}{?page}{?results}]

Searching for multiple anime using the `search` endpoint is slow. If you
want to search for a lot of results or simply need speedy results you
can use this endpoint.

This endpoint also supports pagination using the page parameter. The
result items are (Medium) objects.

+ Parameters
  +   query (string, required, `One Piece`) ... Query to search for
  +   language (string, optional, `en`) ... Filter for language,
      defaults to `en`
  +   dubbed (boolean, optional, `false`) ... Filter translation type,
      defaults to `false`
  +   group (boolean, optional, `true`) ... Whether or not to group
      results with the same medium id or not, defaults to `true`
  +   page (number, optional, `0`) ... Page index to return, defaults to
      0
  +   results (number, optional, `20`) ... Amount of (SearchResult)s to
      return for the page, defaults to 20

+ Response 200 (application/json)
    + Attributes
        + anime (array)
            - (SearchResult)


### Get Anime using UID [GET /anime/{?uid}]
The best way to target an anime is by using its UID. A uid (unique identifier), as its name implies,
uniquely identifies an Anime, including the language and translation type.

+ Parameters
    + uid (string, required, `a-onepiece-masteranime-en`) ... UID to look for

+ Response 200 (application/json)
    + Attributes
        + anime (Anime)


### Get Anime using Title [GET /anime/{?anime}{?language}{?dubbed}{?group}]

**Status**: Deprecated, use UIDs.

You can also use the Anime's title to "identify" it.
> Beware that there might be multiple Anime with the same name!
> This method doesn't uniquely identify an Anime.

+ Parameters
    + anime (string, required, `One Piece`) ... Title of the Anime
    + language (string, optional, `en`) ... Filter for language, defaults to `en`
    + dubbed (boolean, optional, `false`) ... Filter translation type, defaults to `false`
    + group (boolean, optional, `true`) ... Group results with the same
        medium id, defaults to `true`.

+ Response 200 (application/json)
    + Attributes
        + anime (Anime)
